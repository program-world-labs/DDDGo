// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/operations/tracer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITracer is a mock of ITracer interface.
type MockITracer struct {
	ctrl     *gomock.Controller
	recorder *MockITracerMockRecorder
}

// MockITracerMockRecorder is the mock recorder for MockITracer.
type MockITracerMockRecorder struct {
	mock *MockITracer
}

// NewMockITracer creates a new mock instance.
func NewMockITracer(ctrl *gomock.Controller) *MockITracer {
	mock := &MockITracer{ctrl: ctrl}
	mock.recorder = &MockITracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITracer) EXPECT() *MockITracerMockRecorder {
	return m.recorder
}

// WithSpan mocks base method.
func (m *MockITracer) WithSpan(ctx context.Context, name string, f func(context.Context)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithSpan", ctx, name, f)
}

// WithSpan indicates an expected call of WithSpan.
func (mr *MockITracerMockRecorder) WithSpan(ctx, name, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSpan", reflect.TypeOf((*MockITracer)(nil).WithSpan), ctx, name, f)
}
