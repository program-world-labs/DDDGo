// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/program-world-labs/DDDGo/internal/domain"
)

// MockICRUDRepository is a mock of ICRUDRepository interface.
type MockICRUDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICRUDRepositoryMockRecorder
}

// MockICRUDRepositoryMockRecorder is the mock recorder for MockICRUDRepository.
type MockICRUDRepositoryMockRecorder struct {
	mock *MockICRUDRepository
}

// NewMockICRUDRepository creates a new mock instance.
func NewMockICRUDRepository(ctrl *gomock.Controller) *MockICRUDRepository {
	mock := &MockICRUDRepository{ctrl: ctrl}
	mock.recorder = &MockICRUDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICRUDRepository) EXPECT() *MockICRUDRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICRUDRepository) Create(ctx context.Context, e domain.IEntity) (domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, e)
	ret0, _ := ret[0].(domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICRUDRepositoryMockRecorder) Create(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICRUDRepository)(nil).Create), ctx, e)
}

// CreateTx mocks base method.
func (m *MockICRUDRepository) CreateTx(arg0 context.Context, arg1 domain.IEntity, arg2 domain.ITransactionEvent) (domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockICRUDRepositoryMockRecorder) CreateTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockICRUDRepository)(nil).CreateTx), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockICRUDRepository) Delete(ctx context.Context, e domain.IEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICRUDRepositoryMockRecorder) Delete(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICRUDRepository)(nil).Delete), ctx, e)
}

// DeleteTx mocks base method.
func (m *MockICRUDRepository) DeleteTx(arg0 context.Context, arg1 domain.IEntity, arg2 domain.ITransactionEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockICRUDRepositoryMockRecorder) DeleteTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockICRUDRepository)(nil).DeleteTx), arg0, arg1, arg2)
}

// GetAll mocks base method.
func (m *MockICRUDRepository) GetAll(ctx context.Context, e domain.IEntity, sq *domain.SearchQuery) ([]domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, e, sq)
	ret0, _ := ret[0].([]domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICRUDRepositoryMockRecorder) GetAll(ctx, e, sq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICRUDRepository)(nil).GetAll), ctx, e, sq)
}

// GetByID mocks base method.
func (m *MockICRUDRepository) GetByID(ctx context.Context, e domain.IEntity) (domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, e)
	ret0, _ := ret[0].(domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockICRUDRepositoryMockRecorder) GetByID(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockICRUDRepository)(nil).GetByID), ctx, e)
}

// Update mocks base method.
func (m *MockICRUDRepository) Update(ctx context.Context, e domain.IEntity) (domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, e)
	ret0, _ := ret[0].(domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockICRUDRepositoryMockRecorder) Update(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICRUDRepository)(nil).Update), ctx, e)
}

// UpdateTx mocks base method.
func (m *MockICRUDRepository) UpdateTx(arg0 context.Context, arg1 domain.IEntity, arg2 domain.ITransactionEvent) (domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockICRUDRepositoryMockRecorder) UpdateTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockICRUDRepository)(nil).UpdateTx), arg0, arg1, arg2)
}

// UpdateWithFields mocks base method.
func (m *MockICRUDRepository) UpdateWithFields(ctx context.Context, e domain.IEntity, keys []string) (domain.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithFields", ctx, e, keys)
	ret0, _ := ret[0].(domain.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithFields indicates an expected call of UpdateWithFields.
func (mr *MockICRUDRepositoryMockRecorder) UpdateWithFields(ctx, e, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithFields", reflect.TypeOf((*MockICRUDRepository)(nil).UpdateWithFields), ctx, e, keys)
}

// UpdateWithFieldsTx mocks base method.
func (m *MockICRUDRepository) UpdateWithFieldsTx(arg0 context.Context, arg1 domain.IEntity, arg2 []string, arg3 domain.ITransactionEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithFieldsTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithFieldsTx indicates an expected call of UpdateWithFieldsTx.
func (mr *MockICRUDRepositoryMockRecorder) UpdateWithFieldsTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithFieldsTx", reflect.TypeOf((*MockICRUDRepository)(nil).UpdateWithFieldsTx), arg0, arg1, arg2, arg3)
}

// MockICacheUpdateRepository is a mock of ICacheUpdateRepository interface.
type MockICacheUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICacheUpdateRepositoryMockRecorder
}

// MockICacheUpdateRepositoryMockRecorder is the mock recorder for MockICacheUpdateRepository.
type MockICacheUpdateRepositoryMockRecorder struct {
	mock *MockICacheUpdateRepository
}

// NewMockICacheUpdateRepository creates a new mock instance.
func NewMockICacheUpdateRepository(ctrl *gomock.Controller) *MockICacheUpdateRepository {
	mock := &MockICacheUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockICacheUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICacheUpdateRepository) EXPECT() *MockICacheUpdateRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockICacheUpdateRepository) Delete(ctx context.Context, e domain.IEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICacheUpdateRepositoryMockRecorder) Delete(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICacheUpdateRepository)(nil).Delete), ctx, e)
}

// Save mocks base method.
func (m *MockICacheUpdateRepository) Save(ctx context.Context, e domain.IEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICacheUpdateRepositoryMockRecorder) Save(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICacheUpdateRepository)(nil).Save), ctx, e)
}

// MockITransactionRepo is a mock of ITransactionRepo interface.
type MockITransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepoMockRecorder
}

// MockITransactionRepoMockRecorder is the mock recorder for MockITransactionRepo.
type MockITransactionRepoMockRecorder struct {
	mock *MockITransactionRepo
}

// NewMockITransactionRepo creates a new mock instance.
func NewMockITransactionRepo(ctrl *gomock.Controller) *MockITransactionRepo {
	mock := &MockITransactionRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepo) EXPECT() *MockITransactionRepoMockRecorder {
	return m.recorder
}

// RunTransaction mocks base method.
func (m *MockITransactionRepo) RunTransaction(ctx context.Context, f domain.TransactionEventFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockITransactionRepoMockRecorder) RunTransaction(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockITransactionRepo)(nil).RunTransaction), ctx, f)
}

// MockITransactionEvent is a mock of ITransactionEvent interface.
type MockITransactionEvent struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionEventMockRecorder
}

// MockITransactionEventMockRecorder is the mock recorder for MockITransactionEvent.
type MockITransactionEventMockRecorder struct {
	mock *MockITransactionEvent
}

// NewMockITransactionEvent creates a new mock instance.
func NewMockITransactionEvent(ctrl *gomock.Controller) *MockITransactionEvent {
	mock := &MockITransactionEvent{ctrl: ctrl}
	mock.recorder = &MockITransactionEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionEvent) EXPECT() *MockITransactionEventMockRecorder {
	return m.recorder
}

// GetTx mocks base method.
func (m *MockITransactionEvent) GetTx() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockITransactionEventMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockITransactionEvent)(nil).GetTx))
}
