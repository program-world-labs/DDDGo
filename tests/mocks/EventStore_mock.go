// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/event/event_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/program-world-labs/DDDGo/internal/domain/event"
)

// MockEventStore is a mock of EventStore interface.
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore.
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance.
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockEventStore) Load(ctx context.Context, aggregateID string, version int) ([]event.DomainEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, aggregateID, version)
	ret0, _ := ret[0].([]event.DomainEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockEventStoreMockRecorder) Load(ctx, aggregateID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockEventStore)(nil).Load), ctx, aggregateID, version)
}

// SafeStore mocks base method.
func (m *MockEventStore) SafeStore(ctx context.Context, events []event.DomainEvent, expectedVersion int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeStore", ctx, events, expectedVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafeStore indicates an expected call of SafeStore.
func (mr *MockEventStoreMockRecorder) SafeStore(ctx, events, expectedVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeStore", reflect.TypeOf((*MockEventStore)(nil).SafeStore), ctx, events, expectedVersion)
}

// Store mocks base method.
func (m *MockEventStore) Store(ctx context.Context, events []event.DomainEvent, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, events, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockEventStoreMockRecorder) Store(ctx, events, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEventStore)(nil).Store), ctx, events, version)
}
