// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/base/datasource/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/program-world-labs/DDDGo/internal/infra/base/entity"
)

// MockIDataSource is a mock of IDataSource interface.
type MockIDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockIDataSourceMockRecorder
}

// MockIDataSourceMockRecorder is the mock recorder for MockIDataSource.
type MockIDataSourceMockRecorder struct {
	mock *MockIDataSource
}

// NewMockIDataSource creates a new mock instance.
func NewMockIDataSource(ctrl *gomock.Controller) *MockIDataSource {
	mock := &MockIDataSource{ctrl: ctrl}
	mock.recorder = &MockIDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDataSource) EXPECT() *MockIDataSourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDataSource) Create(ctx context.Context, e entity.IEntity) (entity.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, e)
	ret0, _ := ret[0].(entity.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIDataSourceMockRecorder) Create(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDataSource)(nil).Create), ctx, e)
}

// Delete mocks base method.
func (m *MockIDataSource) Delete(ctx context.Context, e entity.IEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDataSourceMockRecorder) Delete(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDataSource)(nil).Delete), ctx, e)
}

// GetByID mocks base method.
func (m *MockIDataSource) GetByID(ctx context.Context, e entity.IEntity) (entity.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, e)
	ret0, _ := ret[0].(entity.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIDataSourceMockRecorder) GetByID(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIDataSource)(nil).GetByID), ctx, e)
}

// Update mocks base method.
func (m *MockIDataSource) Update(ctx context.Context, e entity.IEntity) (entity.IEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, e)
	ret0, _ := ret[0].(entity.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIDataSourceMockRecorder) Update(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDataSource)(nil).Update), ctx, e)
}

// UpdateWithFields mocks base method.
func (m_2 *MockIDataSource) UpdateWithFields(ctx context.Context, e entity.IEntity, m []string) (entity.IEntity, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateWithFields", ctx, e, m)
	ret0, _ := ret[0].(entity.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithFields indicates an expected call of UpdateWithFields.
func (mr *MockIDataSourceMockRecorder) UpdateWithFields(ctx, e, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithFields", reflect.TypeOf((*MockIDataSource)(nil).UpdateWithFields), ctx, e, m)
}

// MockICacheDataSource is a mock of ICacheDataSource interface.
type MockICacheDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockICacheDataSourceMockRecorder
}

// MockICacheDataSourceMockRecorder is the mock recorder for MockICacheDataSource.
type MockICacheDataSourceMockRecorder struct {
	mock *MockICacheDataSource
}

// NewMockICacheDataSource creates a new mock instance.
func NewMockICacheDataSource(ctrl *gomock.Controller) *MockICacheDataSource {
	mock := &MockICacheDataSource{ctrl: ctrl}
	mock.recorder = &MockICacheDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICacheDataSource) EXPECT() *MockICacheDataSourceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockICacheDataSource) Delete(ctx context.Context, e entity.IEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICacheDataSourceMockRecorder) Delete(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICacheDataSource)(nil).Delete), ctx, e)
}

// Get mocks base method.
func (m *MockICacheDataSource) Get(ctx context.Context, e entity.IEntity, ttl ...time.Duration) (entity.IEntity, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, e}
	for _, a := range ttl {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(entity.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICacheDataSourceMockRecorder) Get(ctx, e interface{}, ttl ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, e}, ttl...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICacheDataSource)(nil).Get), varargs...)
}

// Set mocks base method.
func (m *MockICacheDataSource) Set(ctx context.Context, e entity.IEntity, ttl ...time.Duration) (entity.IEntity, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, e}
	for _, a := range ttl {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(entity.IEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockICacheDataSourceMockRecorder) Set(ctx, e interface{}, ttl ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, e}, ttl...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICacheDataSource)(nil).Set), varargs...)
}
