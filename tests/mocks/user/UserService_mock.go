// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/user/interface.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/program-world-labs/DDDGo/internal/application/user"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIService) CreateUser(ctx context.Context, UserInfo *user.CreatedInput) (*user.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, UserInfo)
	ret0, _ := ret[0].(*user.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIServiceMockRecorder) CreateUser(ctx, UserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIService)(nil).CreateUser), ctx, UserInfo)
}

// DeleteUser mocks base method.
func (m *MockIService) DeleteUser(ctx context.Context, UserInfo *user.DeletedInput) (*user.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, UserInfo)
	ret0, _ := ret[0].(*user.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIServiceMockRecorder) DeleteUser(ctx, UserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIService)(nil).DeleteUser), ctx, UserInfo)
}

// GetUserDetail mocks base method.
func (m *MockIService) GetUserDetail(ctx context.Context, UserInfo *user.DetailGotInput) (*user.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetail", ctx, UserInfo)
	ret0, _ := ret[0].(*user.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetail indicates an expected call of GetUserDetail.
func (mr *MockIServiceMockRecorder) GetUserDetail(ctx, UserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetail", reflect.TypeOf((*MockIService)(nil).GetUserDetail), ctx, UserInfo)
}

// GetUserList mocks base method.
func (m *MockIService) GetUserList(ctx context.Context, UserInfo *user.ListGotInput) (*user.OutputList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", ctx, UserInfo)
	ret0, _ := ret[0].(*user.OutputList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockIServiceMockRecorder) GetUserList(ctx, UserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockIService)(nil).GetUserList), ctx, UserInfo)
}

// UpdateUser mocks base method.
func (m *MockIService) UpdateUser(ctx context.Context, UserInfo *user.UpdatedInput) (*user.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, UserInfo)
	ret0, _ := ret[0].(*user.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIServiceMockRecorder) UpdateUser(ctx, UserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIService)(nil).UpdateUser), ctx, UserInfo)
}
