name: CI
on: pull_request

jobs:
  golangci-lint:
    name: runner / golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          golangci_lint_flags: "--config=.golangci.yml"

  yamllint:
    name: runner / yamllint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-yamllint@v1
        with:
          fail_on_error: true
          reporter: github-pr-review
          yamllint_flags: '-d "{extends: default, rules: {truthy: disable}}" .'

  hadolint:
    name: runner / hadolint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-hadolint@v1
        with:
          fail_on_error: true
          reporter: github-pr-review

  check-dependencies:
    name: runner / check-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
      - name: WriteGoList
        run: go list -json -m all > go.list
      - name: Nancy
        uses: sonatype-nexus-community/nancy-github-action@main
        continue-on-error: true

  tests:
    name: runner / tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ">=1.18.0"
      - name: Install dependencies
        run: go mod download

      - name: Unit Tests
        run: "go test \
          -v \
          -race \
          -covermode atomic \
          -coverprofile=coverage.txt \
          ./tests/..."
      - name: Zip files
        run: zip -r tests/report.zip tests/report
      - name: Upload report to Jira Zephyr
        uses: program-world-labs/jira-zephyr-action@v1
        with:
          project_key: ${{ secrets.JIRA_ZEPHYR_PROJECT_KEY }}
          format: "cucumber"
          auth: ${{ secrets.JIRA_ZEPHYR_TOKEN }}
          file_path: "tests/report.zip"
          auto_create_test_cases: "false"
          test_cycle: '{"name": "Test Regression", "description": "Regression test cycle 1 to ensure no breaking changes", "jiraProjectVersion": 10000}'
      - name: Generate coverage report
        run: |
          go get github.com/boumenot/gocover-cobertura
          go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: GO_VERSION
          fail_ci_if_error: true
          files: coverage.xml
          flags: unittest
          name: codecov-ddd
          verbose: true

      - name: Integration tests
        run: "docker-compose up \
          --build \
          --abort-on-container-exit \
          --exit-code-from integration"
