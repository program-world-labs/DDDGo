// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/allegro/bigcache/v3"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/program-world-labs/DDDGo/config"
	"github.com/program-world-labs/DDDGo/internal/adapter/http/v1"
	role2 "github.com/program-world-labs/DDDGo/internal/application/role"
	user2 "github.com/program-world-labs/DDDGo/internal/application/user"
	"github.com/program-world-labs/DDDGo/internal/infra/base/datasource/cache"
	"github.com/program-world-labs/DDDGo/internal/infra/dto"
	"github.com/program-world-labs/DDDGo/internal/infra/role"
	"github.com/program-world-labs/DDDGo/internal/infra/user"
	"github.com/program-world-labs/DDDGo/pkg/cache/local"
	redis2 "github.com/program-world-labs/DDDGo/pkg/cache/redis"
	"github.com/program-world-labs/DDDGo/pkg/httpserver"
	"github.com/program-world-labs/DDDGo/pkg/pwsql"
	"github.com/program-world-labs/pwlogger"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func NewHTTPServer(cfg *config.Config, l pwlogger.Interface) (*httpserver.Server, error) {
	isqlGorm, err := providePostgres(cfg)
	if err != nil {
		return nil, err
	}
	datasourceImpl := user.NewDatasourceImpl(isqlGorm)
	client, err := provideRedisCache(cfg)
	if err != nil {
		return nil, err
	}
	redisCacheDataSourceImpl := cache.NewRedisCacheDataSourceImpl(client)
	bigCache, err := provideLocalCache()
	if err != nil {
		return nil, err
	}
	bigCacheDataSourceImpl := cache.NewBigCacheDataSourceImp(bigCache)
	repoImpl := provideUserRepo(datasourceImpl, redisCacheDataSourceImpl, bigCacheDataSourceImpl)
	iService := provideUserService(repoImpl, l)
	roleDatasourceImpl := role.NewDatasourceImpl(isqlGorm)
	roleRepoImpl := provideRoleRepo(roleDatasourceImpl, redisCacheDataSourceImpl, bigCacheDataSourceImpl)
	roleIService := provideRoleService(roleRepoImpl, l)
	services := provideServices(iService, roleIService)
	engine := v1.NewRouter(l, services)
	server := provideHTTPServer(engine, cfg)
	return server, nil
}

// wire.go:

func providePostgres(cfg *config.Config) (pwsql.ISQLGorm, error) {
	client, err := pwsql.New(cfg.PG.URL, pwsql.MaxPoolSize(cfg.PG.PoolMax))
	client.GetDB().AutoMigrate(&dto.User{}, &dto.Role{})

	return client, err
}

func provideRedisCache(cfg *config.Config) (*redis.Client, error) {
	c, err := redis2.New(cfg.Redis.DSN)

	return c.Client, err
}

func provideLocalCache() (*bigcache.BigCache, error) {
	c, err := local.New()

	return c.Client, err
}

func provideUserRepo(sqlDatasource *user.DatasourceImpl, redisCacheDatasource *cache.RedisCacheDataSourceImpl, bigCacheDatasource *cache.BigCacheDataSourceImpl) *user.RepoImpl {
	return user.NewRepoImpl(sqlDatasource, redisCacheDatasource, bigCacheDatasource)
}

func provideRoleRepo(sqlDatasource *role.DatasourceImpl, redisCacheDatasource *cache.RedisCacheDataSourceImpl, bigCacheDatasource *cache.BigCacheDataSourceImpl) *role.RepoImpl {
	return role.NewRepoImpl(sqlDatasource, redisCacheDatasource, bigCacheDatasource)
}

func provideServices(user3 user2.IService, role3 role2.IService) v1.Services {
	return v1.Services{
		User: user3,
		Role: role3,
	}
}

func provideUserService(userRepo *user.RepoImpl, l pwlogger.Interface) user2.IService {
	return user2.NewServiceImpl(userRepo, l)
}

func provideRoleService(roleRepo *role.RepoImpl, l pwlogger.Interface) role2.IService {
	return role2.NewServiceImpl(roleRepo, l)
}

func provideHTTPServer(handler *gin.Engine, cfg *config.Config) *httpserver.Server {
	return httpserver.New(handler, httpserver.Port(cfg.HTTP.Port))
}

var appSet = wire.NewSet(
	providePostgres,
	provideRedisCache,
	provideLocalCache, user.NewDatasourceImpl, role.NewDatasourceImpl, cache.NewRedisCacheDataSourceImpl, cache.NewBigCacheDataSourceImp, provideUserRepo,
	provideRoleRepo,
	provideUserService,
	provideRoleService,
	provideServices, v1.NewRouter, provideHTTPServer,
)
