// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/allegro/bigcache/v3"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/program-world-labs/DDDGo/config"
	"github.com/program-world-labs/DDDGo/internal/adapter/http/v1"
	"github.com/program-world-labs/DDDGo/internal/application/user"
	"github.com/program-world-labs/DDDGo/internal/infra/datasource/cache"
	"github.com/program-world-labs/DDDGo/internal/infra/datasource/sql"
	"github.com/program-world-labs/DDDGo/internal/infra/repository"
	"github.com/program-world-labs/DDDGo/pkg/cache/local"
	redis2 "github.com/program-world-labs/DDDGo/pkg/cache/redis"
	"github.com/program-world-labs/DDDGo/pkg/httpserver"
	"github.com/program-world-labs/DDDGo/pkg/operations"
	"github.com/program-world-labs/DDDGo/pkg/sql_gorm"
	"github.com/program-world-labs/pwlogger"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func NewHTTPServer(cfg *config.Config, l pwlogger.Interface) (*httpserver.Server, error) {
	db, err := providePostgres(cfg)
	if err != nil {
		return nil, err
	}
	userDatasourceImpl := sql.NewUserDatasourceImpl(db)
	client, err := provideRedisCache(cfg)
	if err != nil {
		return nil, err
	}
	redisCacheDataSourceImpl := cache.NewRedisCacheDataSourceImpl(client)
	bigCache, err := provideLocalCache()
	if err != nil {
		return nil, err
	}
	bigCacheDataSourceImpl := cache.NewBigCacheDataSourceImp(bigCache)
	userRepoImpl := provideUserRepo(userDatasourceImpl, redisCacheDataSourceImpl, bigCacheDataSourceImpl)
	iTracer, err := provideTracer(cfg)
	if err != nil {
		return nil, err
	}
	iUserService := provideService(userRepoImpl, l, iTracer)
	engine := v1.NewRouter(l, iUserService)
	server := provideHTTPServer(engine, cfg)
	return server, nil
}

// wire.go:

func provideTracer(cfg *config.Config) (operations.ITracer, error) {
	operations.GoogleCloudOperationInit(cfg.GCP.Project, cfg.GCP.Monitor)
	return operations.NewTracer(cfg.App.Name), nil
}

func providePostgres(cfg *config.Config) (*gorm.DB, error) {
	client, err := sqlgorm.New(cfg.PG.URL, sqlgorm.MaxPoolSize(cfg.PG.PoolMax))
	return client.DB, err
}

func provideRedisCache(cfg *config.Config) (*redis.Client, error) {
	cache2, err := redis2.New(cfg.Redis.DSN)
	return cache2.Client, err
}

func provideLocalCache() (*bigcache.BigCache, error) {
	cache2, err := local.New()
	return cache2.Client, err
}

func provideUserRepo(sqlDatasource *sql.UserDatasourceImpl, redisCacheDatasource *cache.RedisCacheDataSourceImpl, bigCacheDatasource *cache.BigCacheDataSourceImpl) *repository.UserRepoImpl {
	return repository.NewUserRepoImpl(sqlDatasource, redisCacheDatasource, bigCacheDatasource)
}

func provideService(userRepo *repository.UserRepoImpl, l pwlogger.Interface, t operations.ITracer) user.IUserService {
	return user.NewServiceImpl(userRepo, l, t)
}

func provideHTTPServer(handler *gin.Engine, cfg *config.Config) *httpserver.Server {
	return httpserver.New(handler, httpserver.Port(cfg.HTTP.Port))
}

var appSet = wire.NewSet(
	provideTracer,
	providePostgres,
	provideRedisCache,
	provideLocalCache, sql.NewUserDatasourceImpl, cache.NewRedisCacheDataSourceImpl, cache.NewBigCacheDataSourceImp, provideUserRepo,
	provideService, v1.NewRouter, provideHTTPServer,
)
